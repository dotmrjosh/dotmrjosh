---
type Props = {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  data?: { keyed?: Record<string, number> };
  total?: number;
  size?: number;
  gap?: number;
};

const { total = 140, size = 14, gap = 4, data, ...pos } = Astro.props;

const ROWS = 7;
const COLUMNS = Math.ceil(total / 7);

const TILES_WIDTH = size * COLUMNS + gap * (COLUMNS - 1);
const TILES_HEIGHT = size * ROWS + gap * (ROWS - 1);

const ELEMENT_WIDTH = pos.width ?? (pos.height !== undefined ? (pos.height / TILES_HEIGHT) * TILES_WIDTH : TILES_WIDTH);
const ELEMENT_HEIGHT = pos.height ?? (pos.width !== undefined ? (pos.width / TILES_WIDTH) * TILES_HEIGHT : TILES_HEIGHT);

const BASE_DELAY = 700;

const tiles: [string, number][] = [];

for (let i = 0; i < 140; i++) {
  const date = new Date();
  date.setDate(date.getDate() - i);

  const key = date.toISOString().split("T")[0];
  const day: [string, number] = [key, 0];
  if (data?.keyed && key in data.keyed) {
    day[1] += data.keyed[key];
  }
  // Testing
  // day[1] += Math.floor(Math.random() * 100);

  tiles.push(day);
}
---

<svg
  x={pos.x}
  y={pos.y}
  width={ELEMENT_WIDTH}
  height={ELEMENT_HEIGHT}
  viewBox={`0 0 ${TILES_WIDTH} ${TILES_HEIGHT}`}
  xmlns="http://www.w3.org/2000/svg"
>
  <style>
    .animate-fadein {
      animation: fadein 0.7s ease-out forwards;
      opacity: 0%;
    }

    @keyframes fadein {
      from {
        opacity: 0%;
      }
      to {
        opacity: 100%;
      }
    }
  </style>

  <defs>
    <linearGradient id="tileGradient">
      <stop offset="0%" stop-color="#44a0fc"></stop>
      <stop offset="100%" stop-color="#fc4469"></stop>
    </linearGradient>
  </defs>

  <mask id="tileMask" mask-type="luminace">
    {
      tiles.map(([_, contribs], index) => {
        const row = Math.floor(index / 7);
        const col = index % 7;
        const y = col * (14 + 4);
        const x = row * (14 + 4);

        return (
          <rect
            class="animate-fadein"
            x={x}
            y={y}
            width={14}
            height={14}
            rx={4}
            ry={4}
            fill="white"
            style={{
              "animation-delay": `${BASE_DELAY + index * (Math.random() * 7)}ms`,
              "fill-opacity": `${Math.max(14, Math.min(contribs, 100))}%`,
            }}
          />
        );
      })
    }
  </mask>
  <rect x="0" y="0" width="100%" height="100%" fill="url(#tileGradient)" mask="url(#tileMask)"></rect>
</svg>
